
"""
Este script simula um Sistema de Gerenciamento de Banco de Dados (SGBD)
de forma extremamente simplificada, usando apenas classes e dicion√°rios em Python.
O objetivo √© ilustrar os conceitos de:
- Armazenamento de dados (tabelas)
- Manipula√ß√£o de dados (DML: Inserir, Selecionar, Atualizar)
- Controle de transa√ß√µes (Princ√≠pio da Atomicidade - ACID)
- Vis√µes externas para diferentes usu√°rios.

Vamos usar o cen√°rio da loja de e-commerce da nossa aula.
"""

# üèõÔ∏è Pense nesta classe como o pr√≥prio SGBD, o "bibliotec√°rio" dos nossos dados.
class SimpleSGBD:
    """
    Uma classe que simula as opera√ß√µes b√°sicas de um SGBD em mem√≥ria.
    """
    def __init__(self):
        #  NIVEL INTERNO: Aqui, estamos simulando o armazenamento de dados.
        # Em um SGBD real, isso seria gerenciado em disco de forma complexa.
        # Nossas "tabelas" s√£o dicion√°rios que guardam listas de registros.
        self._dados = {
            "clientes": [],
            "produtos": [],
            "pedidos": []
        }
        # Para simular chaves prim√°rias √∫nicas
        self._proximo_id = {
            "clientes": 1,
            "produtos": 1,
            "pedidos": 1
        }
        print("üöÄ SGBD Simples iniciado. Banco de dados em mem√≥ria criado.")

    # üë®‚Äç‚úàÔ∏è Esta se√ß√£o simula o PROCESSADOR DML (Data Manipulation Language)
    def inserir(self, tabela, registro):
        """ Simula o comando INSERT. """
        if tabela not in self._dados:
            print(f"‚ùå Erro: Tabela '{tabela}' n√£o existe.")
            return None
        
        # Simula uma chave prim√°ria auto-increment√°vel
        id_chave = f"id_{tabela[:-1]}" # ex: id_cliente
        registro[id_chave] = self._proximo_id[tabela]
        self._proximo_id[tabela] += 1
        
        self._dados[tabela].append(registro)
        print(f"‚úÖ Registro inserido na tabela '{tabela}': {registro}")
        return registro

    def selecionar(self, tabela, condicao=None):
        """ 
        Simula o comando SELECT. 
        A 'condicao' √© uma fun√ß√£o lambda, simulando a cl√°usula WHERE.
        Isto tamb√©m representa o OTIMIZADOR DE CONSULTAS de forma muito b√°sica.
        """
        if tabela not in self._dados:
            print(f"‚ùå Erro: Tabela '{tabela}' n√£o existe.")
            return []
        
        if condicao is None:
            # SELECT * FROM tabela
            return self._dados[tabela]
        
        # SELECT * FROM tabela WHERE <condicao>
        return [registro for registro in self._dados[tabela] if condicao(registro)]

    def atualizar_estoque(self, id_produto, quantidade):
        """ Simula um UPDATE espec√≠fico para o estoque. """
        for produto in self._dados["produtos"]:
            if produto["id_produto"] == id_produto:
                produto["estoque"] -= quantidade
                return True
        return False

    # ü§µ Esta fun√ß√£o simula o GERENCIADOR DE TRANSA√á√ïES
    def processar_pedido(self, id_cliente, id_produto, quantidade):
        """
        Simula uma transa√ß√£o de venda, aplicando o princ√≠pio de ATOMICIDADE (o 'A' do ACID).
        A opera√ß√£o s√≥ √© conclu√≠da se todas as etapas forem bem-sucedidas.
        """
        print(f"\n‚ö° Iniciando transa√ß√£o: Cliente {id_cliente} quer comprar {quantidade} unidade(s) do Produto {id_produto}.")

        # 1. Verificar se o cliente existe
        cliente = self.selecionar("clientes", lambda c: c["id_cliente"] == id_cliente)
        if not cliente:
            print("‚ùå TRANSA√á√ÉO FALHOU: Cliente n√£o encontrado. Rollback.")
            return False

        # 2. Verificar se o produto existe e tem estoque
        produto = self.selecionar("produtos", lambda p: p["id_produto"] == id_produto)
        if not produto:
            print("‚ùå TRANSA√á√ÉO FALHOU: Produto n√£o encontrado. Rollback.")
            return False
        
        produto_em_estoque = produto[0]
        if produto_em_estoque["estoque"] < quantidade:
            print(f"‚ùå TRANSA√á√ÉO FALHOU: Estoque insuficiente para o produto '{produto_em_estoque['nome']}'. Rollback.")
            return False

        # --- PONTO DE N√ÉO RETORNO: Se todas as verifica√ß√µes passaram, executa as opera√ß√µes ---
        print("... Verifica√ß√µes conclu√≠das. Efetuando altera√ß√µes...")
        
        # 3. Atualizar o estoque do produto (opera√ß√£o de UPDATE)
        self.atualizar_estoque(id_produto, quantidade)
        
        # 4. Criar um novo pedido (opera√ß√£o de INSERT)
        novo_pedido = {
            "id_cliente": id_cliente,
            "id_produto": id_produto,
            "quantidade": quantidade,
            "status": "Conclu√≠do"
        }
        self.inserir("pedidos", novo_pedido)

        print("‚úÖ TRANSA√á√ÉO CONCLU√çDA COM SUCESSO! Pedido processado.")
        return True

# --- C√≥digo principal que utiliza o nosso SGBD ---
if __name__ == "__main__":
    
    # Criamos uma inst√¢ncia do nosso sistema de gerenciamento
    sgbd = SimpleSGBD()

    # Populando o banco de dados
    print("\n--- Populando o banco de dados ---")
    sgbd.inserir("clientes", {"nome": "Alice", "email": "alice@email.com"})
    sgbd.inserir("clientes", {"nome": "Beto", "email": "beto@email.com"})
    
    sgbd.inserir("produtos", {"nome": "Notebook Gamer", "preco": 5000.00, "estoque": 10})
    sgbd.inserir("produtos", {"nome": "Mouse sem Fio", "preco": 150.00, "estoque": 30})
    sgbd.inserir("produtos", {"nome": "Teclado Mec√¢nico", "preco": 350.00, "estoque": 5})

    # üåá Simulando a VIS√ÉO EXTERNA: Diferentes "usu√°rios" consultando os dados
    print("\n--- Consultas (Vis√£o Externa) ---")
    
    # Vis√£o do Vendedor: "Quais produtos custam menos de R$ 500?"
    produtos_baratos = sgbd.selecionar("produtos", lambda p: p["preco"] < 500)
    print(f"üëÄ Vis√£o do Vendedor (produtos baratos): {produtos_baratos}")

    # Vis√£o do Gerente de Estoque: "Quais produtos t√™m estoque baixo (<= 5)?"
    estoque_baixo = sgbd.selecionar("produtos", lambda p: p["estoque"] <= 5)
    print(f"üì¶ Vis√£o do Gerente de Estoque (estoque baixo): {estoque_baixo}")

    # --- Simulando Transa√ß√µes de Venda ---
    print("\n--- Processamento de Pedidos (Transa√ß√µes) ---")
    
    # Caso 1: Transa√ß√£o com sucesso
    sgbd.processar_pedido(id_cliente=1, id_produto=3, quantidade=2)

    # Caso 2: Tentativa de transa√ß√£o com falha (estoque insuficiente)
    sgbd.processar_pedido(id_cliente=2, id_produto=3, quantidade=10) # Teclado s√≥ tem 3 em estoque agora

    # Caso 3: Tentativa de transa√ß√£o com falha (produto inexistente)
    sgbd.processar_pedido(id_cliente=1, id_produto=99, quantidade=1)

    # --- Verificando o estado final do banco de dados ---
    print("\n--- Estado final do Banco de Dados ---")
    print("Produtos:")
    for p in sgbd.selecionar("produtos"):
        print(f"  - {p}")

    print("\nPedidos:")
    for o in sgbd.selecionar("pedidos"):
        print(f"  - {o}")