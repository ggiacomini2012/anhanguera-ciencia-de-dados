// aula-1.java
// Autor: Exemplificando Aula
// Descri√ß√£o: Este arquivo demonstra os conceitos de Padr√µes de Sistemas,
//            Sistemas Distribu√≠dos e Mobile em Java, aplicados ao
//            desafio do app de supermercado.

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Classe principal que orquestra a simula√ß√£o
public class Aula1 {

    public static void main(String[] args) throws InterruptedException {
        // --- SE√á√ÉO 4: VAMOS EXERCITAR! (Orquestrando o Fluxo) ---
        System.out.println("\n--- üë∑‚Äç‚ôÄÔ∏è Se√ß√£o 4: Executando o Desafio do Supermercado ---");

        // 1. Configura√ß√£o do ambiente (simulando um dispositivo Android)
        String sistemaOperacionalAtual = "android";
        UIAdapter adapterUI = new UIAdapter(sistemaOperacionalAtual);

        // 2. Configura√ß√£o do Backend (Broker e Servi√ßos)
        Broker broker = new Broker();
        broker.registerService("products", new ProductService());
        broker.registerService("recommendations", new RecommendationService());

        // 3. Simula√ß√£o do fluxo do usu√°rio
        System.out.println("\n--- In√≠cio da Simula√ß√£o da Jornada do Usu√°rio ---");

        // Usu√°rio Premium faz login
        User currentUser = UserFactory.getUser("premium");

        // App renderiza a UI com o Adapter
        adapterUI.drawButton(10, 20); // Bot√£o "Minha Conta"
        adapterUI.drawButton(10, 80); // Bot√£o "Carrinho"

        // App busca dados de um produto via Broker
        String productInfo = (String) broker.routeRequest("products", "prod_abcde");
        System.out.println("   RESPOSTA DO BROKER: " + productInfo);

        // App busca recomenda√ß√µes via Broker
        @SuppressWarnings("unchecked")
        List<String> recommendations = (List<String>) broker.routeRequest("recommendations", currentUser);
        System.out.println("   RESPOSTA DO BROKER: " + recommendations);

        // Usu√°rio usa o carrinho de compras (Singleton)
        ShoppingCart cart = ShoppingCart.getInstance();
        cart.addItem("Queijo Provolone");
        cart.addItem(recommendations.get(0));

        // Outra parte do c√≥digo pega a mesma inst√¢ncia do carrinho
        ShoppingCart anotherCartReference = ShoppingCart.getInstance();
        System.out.println("\nO carrinho tem os itens: " + anotherCartReference.getItems());
        System.out.println("Os dois carrinhos s√£o o mesmo objeto? -> " + (cart == anotherCartReference));

        System.out.println("\n--- Fim da Simula√ß√£o ---");
    }
}


// --- SE√á√ÉO 1: PADR√ïES DE SISTEMAS (Design Patterns) ---

// Padr√£o de Projeto: Singleton
class ShoppingCart {
    private static ShoppingCart instance;
    private List<String> items;

    private ShoppingCart() {
        System.out.println("üõí Criando o carrinho de compras √öNICO para esta sess√£o.");
        this.items = new ArrayList<>();
    }

    public static ShoppingCart getInstance() {
        if (instance == null) {
            instance = new ShoppingCart();
        }
        return instance;
    }

    public void addItem(String item) {
        System.out.println("   -> Item '" + item + "' adicionado ao carrinho.");
        this.items.add(item);
    }

    public List<String> getItems() {
        return this.items;
    }
}

// Padr√£o de Projeto: Factory
interface User {
    double getDiscount();
}

class NormalUser implements User {
    @Override
    public double getDiscount() { return 0.0; }
}

class PremiumUser implements User {
    @Override
    public double getDiscount() { return 0.20; } // 20% de desconto
}

class UserFactory {
    public static User getUser(String userType) {
        System.out.println("üë§ F√°brica criando um usu√°rio do tipo: " + userType);
        if ("premium".equalsIgnoreCase(userType)) {
            return new PremiumUser();
        }
        return new NormalUser();
    }
}


// --- SE√á√ÉO 2: PADR√ïES DE SISTEMAS DISTRIBU√çDOS (Simula√ß√£o) ---

// Interface para os microservices
interface Service {
    Object handleRequest(Object payload) throws InterruptedException;
}

// Padr√£o de Arquitetura: Broker
class Broker {
    private Map<String, Service> services = new HashMap<>();

    public Broker() {
        System.out.println("\n--- üåê Se√ß√£o 2: Simulando um Sistema Distribu√≠do ---");
        System.out.println("üìÆ Inicializando o Broker (Central de Comunica√ß√µes).");
    }

    public void registerService(String name, Service service) {
        services.put(name, service);
        System.out.println("   -> Servi√ßo '" + name + "' registrado.");
    }

    public Object routeRequest(String serviceName, Object payload) throws InterruptedException {
        System.out.println("\nBroker recebeu requisi√ß√£o para '" + serviceName + "'...");
        Service service = services.get(serviceName);
        if (service != null) {
            return service.handleRequest(payload);
        }
        return "Erro: Servi√ßo n√£o encontrado.";
    }
}

// Simula√ß√£o de Microservices
class ProductService implements Service {
    @Override
    public Object handleRequest(Object payload) throws InterruptedException {
        System.out.println("   [ProductService] Buscando dados do produto '" + payload + "'.");
        Thread.sleep(500); // Simulando lat√™ncia de rede
        return "{\"id\": \"" + payload + "\", \"name\": \"Vinho Tinto Seco\", \"price\": 75.90}";
    }
}

class RecommendationService implements Service {
    @Override
    public Object handleRequest(Object payload) throws InterruptedException {
        User user = (User) payload;
        System.out.println("   [RecommendationService] Gerando recomenda√ß√µes...");
        Thread.sleep(500); // Simulando processamento de IA
        if (user instanceof PremiumUser) {
            return List.of("Azeite Extra Virgem", "Salm√£o Fresco");
        }
        return List.of("Refrigerante", "Salsicha");
    }
}


// --- SE√á√ÉO 3: PADR√ïES DE SISTEMAS MOBILE (Simula√ß√£o) ---

// "Adaptees": As classes com interfaces incompat√≠veis
class IOS_UI {
    public void renderAppleButton(int x, int y) {
        System.out.println("üé® [iOS] Desenhando um bot√£o com visual da Apple em (" + x + "," + y + ").");
    }
}

class Android_UI {
    public void drawMaterialButton(int coordX, int coordY) {
        System.out.println("üé® [Android] Desenhando um bot√£o Material Design em (" + coordX + "," + coordY + ").");
    }
}

// Padr√£o de Projeto: Adapter
class UIAdapter {
    private String os;
    private IOS_UI iosKit;
    private Android_UI androidKit;

    public UIAdapter(String os) {
        System.out.println("\n--- üì± Se√ß√£o 3: Simulando Padr√µes para App Mobile ---");
        this.os = os;
        if ("ios".equals(os)) {
            this.iosKit = new IOS_UI();
            System.out.println("   -> Adaptador configurado para iOS.");
        } else if ("android".equals(os)) {
            this.androidKit = new Android_UI();
            System.out.println("   -> Adaptador configurado para Android.");
        }
    }

    public void drawButton(int x, int y) {
        System.out.println("App solicitou um bot√£o em (" + x + "," + y + "). O Adaptador est√° traduzindo...");
        if ("ios".equals(this.os)) {
            iosKit.renderAppleButton(x, y);
        } else if ("android".equals(this.os)) {
            androidKit.drawMaterialButton(x, y);
        }
    }
}