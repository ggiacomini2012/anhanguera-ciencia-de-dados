# aula-1.py
# Autor: Exemplificando Aula
# Descri√ß√£o: Este script demonstra os conceitos de Padr√µes de Sistemas,
#            Sistemas Distribu√≠dos e Mobile aplicados ao desafio do app de supermercado.

import time
from abc import ABC, abstractmethod

# --- SE√á√ÉO 1: PADR√ïES DE SISTEMAS (Design Patterns) ---
print("--- üèóÔ∏è  Se√ß√£o 1: Aplicando Padr√µes de Projeto ---")

# Padr√£o de Projeto: Singleton
# Problema: Precisamos de uma √∫nica inst√¢ncia do carrinho de compras por sess√£o de usu√°rio.
# Solu√ß√£o: O Singleton garante que apenas um objeto de carrinho seja criado.

class ShoppingCart:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            print("üõí Criando o carrinho de compras √öNICO para esta sess√£o.")
            cls._instance = super(ShoppingCart, cls).__new__(cls)
            cls._instance.items = []
        return cls._instance

    def add_item(self, item):
        print(f"   -> Item '{item}' adicionado ao carrinho.")
        self.items.append(item)

    def get_items(self):
        return self.items

# Padr√£o de Projeto: Factory
# Problema: Precisamos criar diferentes tipos de usu√°rios (ex: Normal, Premium)
#           sem que o c√≥digo principal precise saber os detalhes da cria√ß√£o de cada um.
# Solu√ß√£o: Uma "f√°brica" decide qual objeto de usu√°rio criar com base em um par√¢metro.

class User(ABC):
    @abstractmethod
    def get_discount(self):
        pass

class NormalUser(User):
    def get_discount(self):
        return 0.0

class PremiumUser(User):
    def get_discount(self):
        return 0.15 # 15% de desconto

def user_factory(user_type):
    """A f√°brica de usu√°rios."""
    if user_type == 'premium':
        print("üë§ Criando um usu√°rio Premium. Bem-vindo de volta!")
        return PremiumUser()
    print("üë§ Criando um usu√°rio Normal.")
    return NormalUser()


# --- SE√á√ÉO 2: PADR√ïES DE SISTEMAS DISTRIBU√çDOS (Simula√ß√£o) ---
print("\n--- üåê Se√ß√£o 2: Simulando um Sistema Distribu√≠do ---")

# Padr√£o de Arquitetura: Broker (ou API Gateway)
# Problema: Em um sistema com m√∫ltiplos servi√ßos (microservices), como o cliente
#           se comunica com eles de forma organizada e desacoplada?
# Solu√ß√£o: O Broker √© um intermedi√°rio que recebe todas as requisi√ß√µes e as
#           redireciona para o servi√ßo correto.

class Broker:
    def __init__(self):
        print("üìÆ Inicializando o Broker (Central de Comunica√ß√µes).")
        self._services = {}

    def register_service(self, name, service):
        """Registra um servi√ßo no broker."""
        self._services[name] = service
        print(f"   -> Servi√ßo '{name}' registrado.")

    def route_request(self, service_name, payload):
        """Redireciona uma requisi√ß√£o para o servi√ßo correto."""
        print(f"\nBroker recebeu requisi√ß√£o para '{service_name}'...")
        service = self._services.get(service_name)
        if service:
            return service.handle_request(payload)
        else:
            return "Erro: Servi√ßo n√£o encontrado."

# Simula√ß√£o de Microservices
class ProductService:
    """Servi√ßo que lida com informa√ß√µes de produtos."""
    def handle_request(self, product_id):
        print(f"   [ProductService] Buscando dados do produto '{product_id}'.")
        # Simula uma busca no banco de dados
        time.sleep(0.5)
        return {"id": product_id, "name": "Leite Integral", "price": 5.99}

class RecommendationService:
    """Servi√ßo que gera recomenda√ß√µes personalizadas."""
    def handle_request(self, user):
        print(f"   [RecommendationService] Gerando recomenda√ß√µes para usu√°rio...")
        # L√≥gica complexa de Machine Learning simulada aqui
        time.sleep(0.5)
        if isinstance(user, PremiumUser):
            return ["Vinho Importado", "Queijo Gorgonzola"]
        return ["P√£o Franc√™s", "Margarina"]


# --- SE√á√ÉO 3: PADR√ïES DE SISTEMAS MOBILE (Simula√ß√£o) ---
print("\n--- üì± Se√ß√£o 3: Simulando Padr√µes para App Mobile ---")

# Padr√£o de Projeto: Adapter
# Problema: O app precisa rodar em iOS e Android, que possuem componentes de UI
#           com interfaces (m√©todos) diferentes.
# Solu√ß√£o: O Adapter cria uma "capa" unificada. O app conversa com o Adapter,
#           e o Adapter "traduz" os comandos para a plataforma espec√≠fica.

class IOS_UI:
    """API de UI espec√≠fica do iOS."""
    def render_button_on_screen(self, x, y):
        print(f"üé® [iOS] Desenhando um bot√£o com cantos arredondados em ({x},{y}).")

class Android_UI:
    """API de UI espec√≠fica do Android."""
    def draw_material_button(self, coord_x, coord_y):
        print(f"üé® [Android] Desenhando um bot√£o Material Design em ({coord_x},{coord_y}).")

class UIAdapter:
    """O Adapter que unifica as interfaces."""
    def __init__(self, os):
        self.os = os
        if os == 'ios':
            self._ui_kit = IOS_UI()
            print("   -> Adaptador configurado para iOS.")
        elif os == 'android':
            self._ui_kit = Android_UI()
            print("   -> Adaptador configurado para Android.")
        else:
            raise ValueError("Sistema Operacional n√£o suportado")

    def draw_button(self, x, y):
        """M√©todo unificado que o app usar√°."""
        print(f"App solicitou um bot√£o em ({x},{y}). O Adaptador est√° traduzindo...")
        if self.os == 'ios':
            self._ui_kit.render_button_on_screen(x, y)
        elif self.os == 'android':
            self._ui_kit.draw_material_button(x, y)


# --- SE√á√ÉO 4: VAMOS EXERCITAR! (Orquestrando o Fluxo) ---
print("\n--- üë∑‚Äç‚ôÄÔ∏è Se√ß√£o 4: Executando o Desafio do Supermercado ---")

# 1. Configura√ß√£o do ambiente (simulando um dispositivo Android)
sistema_operacional_atual = 'android'
adapter_ui = UIAdapter(sistema_operacional_atual)

# 2. Configura√ß√£o do Backend (Broker e Servi√ßos)
broker = Broker()
broker.register_service("products", ProductService())
broker.register_service("recommendations", RecommendationService())

# 3. Simula√ß√£o do fluxo do usu√°rio
print("\n--- In√≠cio da Simula√ß√£o da Jornada do Usu√°rio ---")

# Usu√°rio Premium faz login
current_user = user_factory('premium')

# O App renderiza a tela principal usando o Adapter
adapter_ui.draw_button(10, 20) # Bot√£o de "Promo√ß√µes"
adapter_ui.draw_button(10, 80) # Bot√£o de "Meu Carrinho"

# Usu√°rio pede para ver um produto, a requisi√ß√£o vai para o Broker
product_info = broker.route_request("products", "prod_12345")
print("   RESPOSTA DO BROKER:", product_info)

# Usu√°rio recebe recomenda√ß√µes personalizadas
recommendations = broker.route_request("recommendations", current_user)
print("   RESPOSTA DO BROKER:", recommendations)

# Usu√°rio usa o carrinho de compras (Singleton)
cart = ShoppingCart()
cart.add_item(product_info['name'])
cart.add_item(recommendations[0])

# Outra parte do c√≥digo tenta criar um novo carrinho, mas recebe a mesma inst√¢ncia
another_cart_reference = ShoppingCart()
print(f"\nO carrinho tem os itens: {another_cart_reference.get_items()}")
print(f"Os dois carrinhos s√£o o mesmo objeto? -> {cart is another_cart_reference}")

print("\n--- Fim da Simula√ß√£o ---")