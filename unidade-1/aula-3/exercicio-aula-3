class Node:
    """Representa um nó (demanda) na fila."""
    def __init__(self, id):
        self.id = id
        self.next = None

    def __repr__(self):
        return f"Node(id={self.id})"

class Queue:
    """Implementa uma fila baseada em lista encadeada (FIFO - First-In, First-Out)."""
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def enqueue(self, id):
        """Adiciona um novo elemento ao FINAL da fila."""
        new_node = Node(id)
        # Se a fila está vazia, o novo nó é tanto o início quanto o fim.
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        # Se a fila não está vazia, adiciona o novo nó após o tail atual.
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.size += 1
        print(f"-> ENQUEUE: Processo '{id}' entrou na fila.")

    def dequeue(self):
        """Remove e retorna o elemento do INÍCIO da fila."""
        # Se a fila está vazia, não há o que remover.
        if self.head is None:
            print("<- DEQUEUE: Fila vazia. Nenhum processo para remover.")
            return None
        
        # Pega o ID do nó que está no início da fila.
        removed_id = self.head.id
        
        # Move o head para o próximo nó.
        self.head = self.head.next
        
        # Se após a remoção a fila ficou vazia, atualiza também o tail.
        if self.head is None:
            self.tail = None
        
        self.size -= 1
        print(f"<- DEQUEUE: Processo '{removed_id}' foi removido para processamento.")
        return removed_id

    def is_empty(self):
        """Verifica se a fila está vazia."""
        return self.size == 0

    def __len__(self):
        """Retorna o número de elementos na fila."""
        return self.size

    def __str__(self):
        """Retorna uma representação da fila como string para impressão."""
        if self.is_empty():
            return "[ Fila Vazia ]"
        
        current = self.head
        nodes = []
        while current:
            nodes.append(str(current.id))
            current = current.next
        return f"[ INÍCIO -> {' -> '.join(nodes)} -> FIM ]"